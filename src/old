decl ::= stoDecl 
    | funDecl
stoDecl ::= [CHANGEMODE] typedIdent
funDecl ::= FUN IDENT paramList [RETURNS stoDecl] [GLOBAL globImps] [LOCAL cpsStoDecl] LBRACE cpsCmd RBRACE
globImps ::= globImp {COMMA globImp}
globImp ::= [FLOWMODE] [CHANGEMODE] IDENT
cpsDecl ::= decl {SEMICOLON decl}
cpsStoDecl ::= stoDecl {SEMICOLON stoDecl}


(decl, [[N stoDecl], [N funDecl]])
(stoDecl, [[N _changeOptional, N typedIdent ], [N typedIdent]])
(funDecl, [[T FUN, T IDENT, N paramList, N _returnOptional, N _globalOptional, N _localOptional, T LBRACE, N cpsCmd, T RBRACE]])
(globImps, [[N globImp, _commaMulti]])
(globImp, [[N _flowModeOptional, N _changeOptional, T IDENT]])
(cpsDecl, [[N decl, N _declMulti]])
(cpsStoDecl, [[N stoDecl, N _stoDeclMulti]])

(_stoDeclMulti, [[], [T SEMICOLON, N stoDecl, N _stoDeclMulti]])
(_declMulti, [[], [T SEMICOLON, N deck, N _declMulti]])
(_flowModeOptional, [[], [T FLOWMODE]])
(_commaMulti, [[], [T COMMA, N globImp, N _commaMulti]])
(_changeOptional, [[], [T CHANGEMODE]])
(_returnOptional, [[], [T RETURNS, N stoDecl])
(_globalOptional, [[], [T GLOBAL, N globImps])
(_localOptional,  [[], [T LOCAL, N cpsStoDecl])



factor ::= LITERAL
 | IDENT [INIT | exprList]
 | monadicOpr factor
 | LPAREN expr RPAREN
exprList ::= LPAREN [expr {COMMA expr}] RPAREN
monadicOpr ::= NOT | ADDOPR

(factor, [[T LITERAL], [T IDENT, N _initOrExprListOptional]], [N mpnadicOpr, N factor], [T LPAREN, N expr, T RPAREN])
(exprList, [[T LPAREN, N _exprOptional, T RPAREN]])
(monadicOpr, [[T NOT, T ADDOPR]])

(_exprOptional, [[], [N expr, N _exprMulti]])
(_exprMulti, [[], [T COMMA, N expr, N _exprMutli]])
(_initOrExprListOptional, [[], [T INIT], [N exprList]])
